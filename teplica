/* =============== ПОДКЛЮЧАЕМ НЕОБХОДИМЫЕ БИБЛИОТЕКИ =============== */ 

#include <EncButton.h>
#include <LiquidCrystal_I2C.h>
//#include<GyverEncoder.h>

/* =============== ПОДКЛЮЧАЕМ НЕОБХОДИМЫЕ БИБЛИОТЕКИ =============== */ 


/* =============== ИНИЦИАЛИЗИРУЕМ НАСТРОЙКИ =============== */ 


#define PUPM_AMOUNT 2       // количество помп, подключенных через реле
#define START_PIN 5         // подключены начиная с пина
#define SWITCH_LEVEL 0      // реле: 1 - высокого уровня (или мосфет), 0 - низкого
//#define PARALLEL 0          // 1 - параллельный полив, 0 - полив в порядке очереди
#define TIMER_START 1       // 1 - отсчёт периода с момента ВЫКЛЮЧЕНИЯ помпы, 0 - с момента ВКЛЮЧЕНИЯ помпы
#define PIN_NASOS 7         // Пин с подключенным насосом

//Пины энкодера
#define CLK 2
#define DT 3
#define SW 4

//Encoder enc1(CLK, DT, SW);
EncButton<EB_TICK, 2, 3, 4> enc1;

LiquidCrystal_I2C lcd(0x27, 16, 2); // Инициализация дисплея 16*2
//#define ROWS 4
//#define COLS 3

struct ListMenu
{
  uint8_t parent; //родитель
  uint8_t count; //кол-во элементов в массиве
  uint8_t unique; //уникальный номер элемента
  char name[20]; //имя элемента
};

ListMenu menu[13]; //Инициализация массива структур для меню

// =============== Работа с меню  =============== //

bool inMenu = false; 
uint8_t unique_elem_menu = 1; //уникальный номер меню, который выбран
uint8_t num_str; //сохраняем уникальный номер для каждого подменю, который выбран
uint8_t startt; //уникальный номер элемента с которого начинается уровень меню
uint8_t num = 0; //номер выбранного элемента
bool edit_value = false; // Режим редактирования настроек

// =============== Работа с меню  =============== //

void encISR()
{
  //enc1.tick();
  enc1.tickISR();
}


// =============== Настройки для помп  =============== //

uint32_t pump_timers[PUPM_AMOUNT]; // Запоминает время после ВЫКЛЮЧЕНИЯ помпы, для отсчета включения
uint32_t pumping_time[PUPM_AMOUNT]; // Кол-во времени, отведенное на полив (секунды)
//uint32_t period_time[PUPM_AMOUNT]; // Кол-во времени простоя между поливами
boolean pump_state[PUPM_AMOUNT]; // Состояние помпы (включена\выключена)
byte pump_pins[PUPM_AMOUNT]; // Массив пинов, к которым помпы подключены
uint32_t pump_sensor_on[PUPM_AMOUNT]; // Массив для значений с датчика влажности, при пороге которого будет включаться датчик
uint32_t pump_timer_sleep[PUPM_AMOUNT]; // Массив для запоминания секунд во время выключения помпы, чтобы помпа не включалась, если значение с датчика до сих пор не изменилось

int8_t current_set;
int8_t current_pump;
boolean now_pumping;

int8_t thisH, thisM, thisS;
long thisPeriod;
boolean startFlag = true; // после включения ардуино через эту переменную мы запоминаем время инициализации для последующего включения помп

int sensorPin = A0; // пин для датчика влажности

// =============== Настройки для помп  =============== //

void WorkEditPump();

/* =============== ИНИЦИАЛИЗИРУЕМ НАСТРОЙКИ =============== */ 

void setup() {
  Serial.begin(9600);
  //enc1.setType(TYPE2);
  //attachInterrupt(0, encISR, CHANGE);
  //attachInterrupt(1, encISR, CHANGE);
  pinMode(START_PIN + 2, OUTPUT); 
  digitalWrite(START_PIN + 2, !SWITCH_LEVEL);
  // --------------------- КОНФИГУРИРУЕМ ПИНЫ ---------------------//
  for (byte i = 0; i < PUPM_AMOUNT; i++) {            // пробегаем по всем помпам
    pump_pins[i] = START_PIN + i;                     // настраиваем массив пинов
    pumping_time[i] = 5;                             // время работы помпы, секунд
    pump_sensor_on[i] = 1000;                        // порог включения помпы
    pinMode(START_PIN + i, OUTPUT);                   // настраиваем пины
    digitalWrite(START_PIN + i, !SWITCH_LEVEL);       // выключаем от греха
  }
  // --------------------- КОНФИГУРИРУЕМ ПИНЫ ---------------------//
  
  lcd.init();
  lcd.backlight();
  lcd.noBlink();

  menu[0].parent = -1;
  menu[0].count = 4;
  menu[0].unique = 0;
  strcpy(menu[0].name, "Меню");

  menu[1].parent = 0;
  menu[1].count = 2;
  menu[1].unique = 1;
  strcpy(menu[1].name, "Edit data");

  menu[2].parent = 0;
  menu[2].count = 1;
  menu[2].unique = 2;
  strcpy(menu[2].name, "LCD");

  menu[3].parent = 0;
  menu[3].count = 2;
  menu[3].unique = 3;
  strcpy(menu[3].name, "Pump");

  menu[4].parent = 0;
  menu[4].count = 3;
  menu[4].unique = 4;
  strcpy(menu[4].name, "Testings");

  menu[5].parent = 1;
  menu[5].count = 0;
  menu[5].unique = 5;
  strcpy(menu[5].name, "Vlazjnost");

  menu[6].parent = 1;
  menu[6].count = 0;
  menu[6].unique = 6;
  strcpy(menu[6].name, "Davlenie");

  menu[7].parent = 2;
  menu[7].count = 0;
  menu[7].unique = 7;
  strcpy(menu[7].name, "Yarkost");

  menu[8].parent = 3;
  menu[8].count = 0;
  menu[8].unique = 8;
  strcpy(menu[8].name, "Pump 1");

  menu[9].parent = 3;
  menu[9].count = 0;
  menu[9].unique = 9;
  strcpy(menu[9].name, "Pump 2");

  menu[10].parent = 4;
  menu[10].count = 0;
  menu[10].unique = 10;
  strcpy(menu[10].name, "Dt1");

  menu[11].parent = 4;
  menu[11].count = 0;
  menu[11].unique = 11;
  strcpy(menu[11].name, "Dt2");

  menu[12].parent = 4;
  menu[12].count = 0;
  menu[12].unique = 12;
  strcpy(menu[12].name, "Dt3");

  lcd.clear();
  lcd.setCursor(0, 0);          // Установить курсор на первыю строку
  lcd.print("Project Targetss");    // Вывести текст
  lcd.setCursor(4, 1);          // Установить курсор на вторую строку
  lcd.print("Teplica");
  delay(2000);

  ShowDataDisplay();
}

void loop() {
  CheckEncoder();
  FlowTick();
  PeriodTick();
}

void CheckEncoder()
{
  enc1.tick();

  if(inMenu == false && edit_value == true)
  {
    WorkEditPump();
  }
  
  if(!inMenu && (enc1.left() || enc1.right()) && edit_value == false){
    inMenu = true;
    num_str = unique_elem_menu;
    startt = num_str;
    lcd.clear();
    Print(num, startt);
  }
  
  switch(inMenu)
  {
    case true:
      
      if(enc1.right())
      {
        if (num >= 1) {
          if (menu[startt + 1].parent != menu[startt + 2].parent) { //проверяем последние ли это элементы для вывода на дисплей
            num = 0;                                       //если начальная позиция + кол-во элементов за минусом один, т.к экран на две строки и при переходе мы
            startt = num_str;                               //прибавляем к позициям число 2 и все это сравниваем со след позицией, т.е последней в этом списке
            Print(num, startt);
            break;
          }
          if(menu[startt + 1].parent == menu[startt+2].parent)
          num = 0;
          startt += 2;
        }
        else if (num == 0 && menu[startt+1].parent != menu[startt].parent)
        {
          num = 0;
          startt = num_str;
        } else
        {
          num++;
        }
        Print(num, startt);
      } else if(enc1.left())
      {
        if (num <= 0) {
          if (num_str == startt && menu[menu[num_str].parent].count % 2 == 0) {
            num = 1;
            startt = startt + menu[menu[num_str].parent].count - 2;
          } else if (num_str == startt && menu[menu[num_str].parent].count % 2 == 1) 
          {
            num = 0;
            startt = startt + menu[menu[num_str].parent].count - 1;
          } else 
          {
            num = 1;
            startt -= 2;
          }
        } else 
        {
          num--;
        }
        Print(num, startt);
      } else if(enc1.click())
      {
        if(((startt+num) == 8 || (startt+num) == 9))
        {
          inMenu = false;
          edit_value = true;
          EditSettingPumping(startt+num);
          break;
        }
        SearchUniqueElem(true, (startt+num));
        DefaultDataMenu();
        Print(num, startt);
      } else if(enc1.leftH())
      {      
        if(menu[startt+num].parent != 0)
        {
          SearchUniqueElem(false, (startt+num));
          DefaultDataMenu();
          Print(num, startt);
        }
        else
        {
          inMenu = false;
          DefaultDataMenu();
        }
      }
      break;
    case false:
      //ShowDataDisplay();
      break;
  }
}

void WorkEditPump()
{
    if(enc1.left())
    {
      //lcd.clear();
      if(startt+num == 8)
      {
        if(pump_sensor_on[0] < 1005)
        {
          pump_sensor_on[0] +=5;
          EditSettingPumping(startt+num);
        }
      }
      else if(startt+num == 9)
      {
        if(pump_sensor_on[1] < 1005)
        {
          pump_sensor_on[1] +=5;
          EditSettingPumping(startt+num);
        }
      }
    }
    else if(enc1.right())
    {
      if(startt+num == 8)
      {
        if(pump_sensor_on[0] > 205)
        {
          pump_sensor_on[0] -=5;
          EditSettingPumping(startt+num);
        }
      }
      else if(startt+num == 9)
      {
        if(pump_sensor_on[1] > 205)
        {
          pump_sensor_on[1] -=5;
          EditSettingPumping(startt+num);
        }
      }
    }
    else if(edit_value == true & enc1.leftH())
    {
      inMenu = true;
      edit_value = false;     
      Print(num, startt);
    }
}

// Работа с настройками помпы
void EditSettingPumping(int num_element)
{
      lcd.setCursor(0, 0);
      lcd.print(menu[num_element].name);

      lcd.setCursor(0, 1);
      lcd.print("Edit:<");
      if(pump_sensor_on[0] < 1000 || pump_sensor_on[1] < 1000)
      {
        lcd.setCursor(11,1);
        lcd.print(" ");
      }
      lcd.setCursor(8, 1);
      if(num_element == 8)
      {
        lcd.print(pump_sensor_on[0]);
      }
      else if(num_element == 9)
      {
        lcd.print(pump_sensor_on[1]);
      }
      lcd.setCursor(13, 1);
      lcd.print(">");
}

void FlowTick() // проверка для выключения помпы
{
  for (byte i = 0; i < PUPM_AMOUNT; i++) {            // пробегаем по всем помпам
    if (pumping_time[i] > 0
        && millis() - pump_timers[i] >= pumping_time[i] * 1000
        && (pump_state[i] == SWITCH_LEVEL) ) {
      pump_state[i] = !SWITCH_LEVEL;
      digitalWrite(pump_pins[i], !SWITCH_LEVEL); //выключаем помпу
      digitalWrite(START_PIN + 2, !SWITCH_LEVEL);
      pump_timer_sleep[i] = millis();
      //pump_timers[i] = millis();
      Serial.println("Pump #" + String(i) + " OFF");
    }
  }
}

void PeriodTick() { // включаем помпы
  int sensorValue;
  sensorValue = analogRead(sensorPin);
  for (byte i = 0; i < PUPM_AMOUNT; i++) {            // пробегаем по всем помпам
    if (startFlag ||
        ((pump_sensor_on[i] < sensorValue)
         && (pump_state[i] != SWITCH_LEVEL) && millis() - pump_timer_sleep[i] >= 60000)) 
    {
      pump_state[i] = SWITCH_LEVEL;
      digitalWrite(pump_pins[i], SWITCH_LEVEL); // включаем помпу
      digitalWrite(START_PIN + 2, SWITCH_LEVEL);
      pump_timers[i] = millis();
      //now_pumping = true;
      Serial.println("Pump #" + String(i) + " ON");
    }
  }
  startFlag = false;
}

void ShowDataDisplay()
{
  int sensorValue;
  sensorValue = analogRead(sensorPin);
  lcd.clear();
  lcd.setCursor(0, 0);          // Установить курсор на первыю строку
  lcd.print("Tmp:");    // Вывести текст
  lcd.setCursor(5, 0);
  lcd.print(sensorValue);
  lcd.setCursor(8, 0);
}

void SearchUniqueElem(bool df, int el)
{
  if(df) // вперед по меню
  {
    for (int i = 0; i < 13; i++) {
      if (menu[i].parent == el) {
        unique_elem_menu = menu[i].unique;
        break;
      }
    }
  }
  else
  {
    for (int i = 0; i < 13; i++) {
      if (menu[i].parent == menu[menu[el].parent].parent) {
        unique_elem_menu = menu[i].unique;
        break;
      }
    }
  }
}

void DefaultDataMenu()
{
  num_str = unique_elem_menu;
  startt = num_str;
  num = 0;
}

void Print(int num, int s) {
  lcd.clear();
  switch (num) {
    case 0:
      if (menu[s].parent != menu[s + 1].parent) {
        lcd.print(">");
        lcd.setCursor(2, 0);          // Установить курсор на первыю строку
        lcd.print(menu[s].name);    // Вывести текст
        break;
      }
      lcd.setCursor(0, 0);          // Установить курсор на первыю строку
      lcd.print(">");
      lcd.setCursor(2, 0);          // Установить курсор на первыю строку
      lcd.print(menu[s].name);    // Вывести текст
      lcd.setCursor(0, 1);          // Установить курсор на вторую строку
      lcd.print(menu[s + 1].name);
      break;
    case 1:
      lcd.setCursor(0, 0);          // Установить курсор на первыю строку
      lcd.print(menu[s].name);    // Вывести текст
      lcd.setCursor(0, 1);          // Установить курсор на первыю строку
      lcd.print(">");
      lcd.setCursor(1, 1);          // Установить курсор на вторую строку
      lcd.print(menu[s + 1].name);
      break;
  }
}
